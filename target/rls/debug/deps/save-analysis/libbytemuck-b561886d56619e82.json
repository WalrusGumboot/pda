{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0","program":"/home/simeon/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck_derive\"","--cfg","feature=\"derive\"","-C","metadata=b561886d56619e82","-C","extra-filename=-b561886d56619e82","--out-dir","/home/simeon/dev/rust/anchor/pda/target/rls/debug/deps","-L","dependency=/home/simeon/dev/rust/anchor/pda/target/rls/debug/deps","--extern","bytemuck_derive=/home/simeon/dev/rust/anchor/pda/target/rls/debug/deps/libbytemuck_derive-b1beac42d83f7ab7.so","--cap-lints","allow","--error-format=json","--sysroot","/home/simeon/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/simeon/dev/rust/anchor/pda/target/rls/debug/deps/libbytemuck-b561886d56619e82.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[7202977658043644428,0]},"crate_root":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src","external_crates":[{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":4,"id":{"name":"bytemuck_derive","disambiguator":[10321985552386414692,0]}}],"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":0,"byte_end":15738,"line_start":1,"line_end":498,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2810,"byte_end":2811,"line_start":84,"line_end":84,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2836,"byte_end":2837,"line_start":87,"line_end":87,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2876,"byte_end":2877,"line_start":90,"line_end":90,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2914,"byte_end":2915,"line_start":93,"line_end":93,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2956,"byte_end":2957,"line_start":96,"line_end":96,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":176},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":3013,"byte_end":3023,"line_start":99,"line_end":99,"column_start":27,"column_end":37},"alias_span":null,"name":"Contiguous","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":173},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":3025,"byte_end":3028,"line_start":99,"line_end":99,"column_start":39,"column_end":42},"alias_span":null,"name":"Pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":175},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":3030,"byte_end":3048,"line_start":99,"line_end":99,"column_start":44,"column_end":62},"alias_span":null,"name":"TransparentWrapper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":174},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":3050,"byte_end":3058,"line_start":99,"line_end":99,"column_start":64,"column_end":72},"alias_span":null,"name":"Zeroable","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":0,"byte_end":15738,"line_start":1,"line_end":498,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":584},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16711,"byte_end":16719,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":20}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16253,"byte_end":16304,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16305,"byte_end":16339,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16340,"byte_end":16343,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16344,"byte_end":16407,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16408,"byte_end":16464,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16465,"byte_end":16468,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16469,"byte_end":16482,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16483,"byte_end":16486,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16487,"byte_end":16528,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16529,"byte_end":16576,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16577,"byte_end":16650,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16651,"byte_end":16693,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16999,"byte_end":17005,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16731,"byte_end":16771,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16774,"byte_end":16777,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16780,"byte_end":16855,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16858,"byte_end":16936,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16939,"byte_end":16981,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16984,"byte_end":16993,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":116},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34441,"byte_end":34444,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33145,"byte_end":33183,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33184,"byte_end":33187,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33188,"byte_end":33265,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33266,"byte_end":33345,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33346,"byte_end":33426,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33427,"byte_end":33445,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33446,"byte_end":33449,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33450,"byte_end":33526,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33527,"byte_end":33598,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33599,"byte_end":33673,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33674,"byte_end":33692,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33693,"byte_end":33696,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33697,"byte_end":33710,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33711,"byte_end":33714,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33715,"byte_end":33755,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33756,"byte_end":33803,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33804,"byte_end":33882,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33883,"byte_end":33911,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33912,"byte_end":33989,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":33990,"byte_end":34070,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34071,"byte_end":34151,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34152,"byte_end":34167,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34168,"byte_end":34222,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34223,"byte_end":34298,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34299,"byte_end":34378,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34379,"byte_end":34423,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":160},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51813,"byte_end":51823,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":48845,"byte_end":48873,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":48874,"byte_end":48877,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":48878,"byte_end":48953,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":48954,"byte_end":49020,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49021,"byte_end":49065,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49066,"byte_end":49069,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49070,"byte_end":49149,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49150,"byte_end":49230,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49231,"byte_end":49293,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49294,"byte_end":49297,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49298,"byte_end":49376,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49377,"byte_end":49452,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49453,"byte_end":49481,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49482,"byte_end":49485,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49486,"byte_end":49499,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49500,"byte_end":49503,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49504,"byte_end":49511,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49512,"byte_end":49543,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49544,"byte_end":49559,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49560,"byte_end":49604,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49605,"byte_end":49619,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49620,"byte_end":49632,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49633,"byte_end":49645,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49646,"byte_end":49658,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49659,"byte_end":49671,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49672,"byte_end":49684,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49685,"byte_end":49690,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49691,"byte_end":49727,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49728,"byte_end":49748,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49749,"byte_end":49790,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49791,"byte_end":49832,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49833,"byte_end":49838,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49839,"byte_end":49893,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49894,"byte_end":49937,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49938,"byte_end":49979,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49980,"byte_end":49987,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":49988,"byte_end":50000,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50001,"byte_end":50004,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50005,"byte_end":50078,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50079,"byte_end":50092,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50093,"byte_end":50096,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50097,"byte_end":50174,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50175,"byte_end":50254,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50255,"byte_end":50309,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50310,"byte_end":50313,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50314,"byte_end":50394,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50395,"byte_end":50417,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50418,"byte_end":50421,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50422,"byte_end":50502,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50503,"byte_end":50559,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50560,"byte_end":50563,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50564,"byte_end":50639,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50640,"byte_end":50712,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50713,"byte_end":50782,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50783,"byte_end":50786,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50787,"byte_end":50865,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50866,"byte_end":50942,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50943,"byte_end":50954,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50955,"byte_end":50958,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":50959,"byte_end":51031,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51032,"byte_end":51110,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51111,"byte_end":51187,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51188,"byte_end":51267,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51268,"byte_end":51271,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51272,"byte_end":51344,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51345,"byte_end":51410,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51411,"byte_end":51414,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51415,"byte_end":51492,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51493,"byte_end":51515,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51516,"byte_end":51519,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51520,"byte_end":51599,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51600,"byte_end":51633,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51634,"byte_end":51637,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51638,"byte_end":51715,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51716,"byte_end":51795,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":161},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52648,"byte_end":52651,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51844,"byte_end":51915,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51918,"byte_end":51927,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51930,"byte_end":51933,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51936,"byte_end":52008,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52011,"byte_end":52077,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52080,"byte_end":52148,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52151,"byte_end":52193,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52196,"byte_end":52199,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52202,"byte_end":52279,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52282,"byte_end":52304,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52307,"byte_end":52310,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52313,"byte_end":52382,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52385,"byte_end":52461,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52464,"byte_end":52533,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52536,"byte_end":52574,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52577,"byte_end":52580,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52583,"byte_end":52640,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":162},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52742,"byte_end":52751,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52668,"byte_end":52733,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":163},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52841,"byte_end":52850,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52767,"byte_end":52832,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53515,"byte_end":53527,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52866,"byte_end":52934,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":52937,"byte_end":53000,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53003,"byte_end":53006,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53009,"byte_end":53083,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53086,"byte_end":53153,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53156,"byte_end":53224,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53227,"byte_end":53230,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53233,"byte_end":53245,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53248,"byte_end":53251,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53254,"byte_end":53327,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53330,"byte_end":53376,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53379,"byte_end":53382,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53385,"byte_end":53459,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53462,"byte_end":53497,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":53500,"byte_end":53509,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":55050,"byte_end":55062,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54366,"byte_end":54441,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54444,"byte_end":54520,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54523,"byte_end":54535,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54538,"byte_end":54541,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54544,"byte_end":54618,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54621,"byte_end":54688,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54691,"byte_end":54759,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54762,"byte_end":54765,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54768,"byte_end":54780,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54783,"byte_end":54786,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54789,"byte_end":54862,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54865,"byte_end":54911,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54914,"byte_end":54917,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54920,"byte_end":54994,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":54997,"byte_end":55032,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":55035,"byte_end":55044,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":173},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65196,"byte_end":65214,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62107,"byte_end":62182,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62183,"byte_end":62212,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62213,"byte_end":62216,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62217,"byte_end":62289,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62290,"byte_end":62368,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62369,"byte_end":62447,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62448,"byte_end":62524,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62525,"byte_end":62601,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62602,"byte_end":62650,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62651,"byte_end":62654,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62655,"byte_end":62667,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62668,"byte_end":62671,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62672,"byte_end":62741,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62742,"byte_end":62745,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62746,"byte_end":62817,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62818,"byte_end":62821,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62822,"byte_end":62894,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62895,"byte_end":62957,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":62958,"byte_end":63037,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63038,"byte_end":63117,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63118,"byte_end":63148,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63149,"byte_end":63152,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63153,"byte_end":63233,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63234,"byte_end":63295,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63296,"byte_end":63299,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63300,"byte_end":63374,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63375,"byte_end":63390,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63391,"byte_end":63469,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63470,"byte_end":63548,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63549,"byte_end":63552,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63553,"byte_end":63624,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63625,"byte_end":63628,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63629,"byte_end":63643,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63644,"byte_end":63647,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63648,"byte_end":63727,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63728,"byte_end":63807,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63808,"byte_end":63883,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63884,"byte_end":63953,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63954,"byte_end":63991,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63992,"byte_end":63995,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":63996,"byte_end":64074,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64075,"byte_end":64143,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64144,"byte_end":64147,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64148,"byte_end":64162,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64163,"byte_end":64166,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64167,"byte_end":64179,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64180,"byte_end":64183,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64184,"byte_end":64191,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64192,"byte_end":64229,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64230,"byte_end":64254,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64255,"byte_end":64284,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64285,"byte_end":64288,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64289,"byte_end":64313,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64314,"byte_end":64347,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64348,"byte_end":64351,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64352,"byte_end":64415,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64416,"byte_end":64419,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64420,"byte_end":64479,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64480,"byte_end":64518,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64519,"byte_end":64579,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64580,"byte_end":64583,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64584,"byte_end":64611,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64612,"byte_end":64658,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64659,"byte_end":64731,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64732,"byte_end":64735,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64736,"byte_end":64793,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64794,"byte_end":64801,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64802,"byte_end":64805,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64806,"byte_end":64845,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64846,"byte_end":64849,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64850,"byte_end":64857,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64858,"byte_end":64895,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64896,"byte_end":64899,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64900,"byte_end":64924,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64925,"byte_end":64950,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64951,"byte_end":64954,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":64955,"byte_end":65013,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65014,"byte_end":65017,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65018,"byte_end":65061,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65062,"byte_end":65095,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65096,"byte_end":65099,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65100,"byte_end":65130,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65131,"byte_end":65170,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65171,"byte_end":65178,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65301,"byte_end":65305,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65234,"byte_end":65283,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65286,"byte_end":65295,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65617,"byte_end":65625,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65514,"byte_end":65587,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65590,"byte_end":65599,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":65602,"byte_end":65611,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66315,"byte_end":66323,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66196,"byte_end":66273,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66276,"byte_end":66297,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66300,"byte_end":66309,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66987,"byte_end":66997,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66898,"byte_end":66969,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":66972,"byte_end":66981,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":67541,"byte_end":67555,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":67430,"byte_end":67503,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":67506,"byte_end":67523,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":67526,"byte_end":67535,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68061,"byte_end":68065,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":67994,"byte_end":68043,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68046,"byte_end":68055,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68270,"byte_end":68278,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68167,"byte_end":68240,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68243,"byte_end":68252,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68255,"byte_end":68264,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68968,"byte_end":68976,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68849,"byte_end":68925,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68928,"byte_end":68950,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":68953,"byte_end":68962,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":69640,"byte_end":69650,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":69551,"byte_end":69622,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":69625,"byte_end":69634,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70195,"byte_end":70209,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70084,"byte_end":70159,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70162,"byte_end":70177,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70180,"byte_end":70189,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":202},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4623,"byte_end":4631,"line_start":136,"line_end":136,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: Pod>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4414,"byte_end":4448,"line_start":131,"line_end":131,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4449,"byte_end":4452,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4453,"byte_end":4531,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4532,"byte_end":4605,"line_start":134,"line_end":134,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4606,"byte_end":4615,"line_start":135,"line_end":135,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5046,"byte_end":5058,"line_start":152,"line_end":152,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: Pod>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4829,"byte_end":4871,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4872,"byte_end":4875,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4876,"byte_end":4954,"line_start":149,"line_end":149,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4955,"byte_end":5028,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5029,"byte_end":5038,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5402,"byte_end":5412,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5272,"byte_end":5306,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5307,"byte_end":5310,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5311,"byte_end":5324,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5325,"byte_end":5328,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5329,"byte_end":5384,"line_start":167,"line_end":167,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5385,"byte_end":5394,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":208},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5685,"byte_end":5699,"line_start":182,"line_end":182,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: Pod>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5543,"byte_end":5585,"line_start":176,"line_end":176,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5586,"byte_end":5589,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5590,"byte_end":5603,"line_start":178,"line_end":178,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5604,"byte_end":5607,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5608,"byte_end":5667,"line_start":180,"line_end":180,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5668,"byte_end":5677,"line_start":181,"line_end":181,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5992,"byte_end":6014,"line_start":194,"line_end":194,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: Pod>(&[u8]) -> Result<T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5846,"byte_end":5893,"line_start":189,"line_end":189,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5894,"byte_end":5897,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5898,"byte_end":5912,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5913,"byte_end":5974,"line_start":192,"line_end":192,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5975,"byte_end":5984,"line_start":193,"line_end":193,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6366,"byte_end":6384,"line_start":207,"line_end":207,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: Pod>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6222,"byte_end":6259,"line_start":202,"line_end":202,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6260,"byte_end":6263,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6264,"byte_end":6277,"line_start":204,"line_end":204,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6278,"byte_end":6348,"line_start":205,"line_end":205,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6349,"byte_end":6358,"line_start":206,"line_end":206,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6732,"byte_end":6746,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: Pod>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6538,"byte_end":6572,"line_start":214,"line_end":214,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6573,"byte_end":6576,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6577,"byte_end":6591,"line_start":216,"line_end":216,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6592,"byte_end":6595,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6596,"byte_end":6645,"line_start":218,"line_end":218,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6646,"byte_end":6714,"line_start":219,"line_end":219,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6715,"byte_end":6724,"line_start":220,"line_end":220,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":216},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7253,"byte_end":7271,"line_start":238,"line_end":238,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: Pod>(&mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7051,"byte_end":7093,"line_start":231,"line_end":231,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7094,"byte_end":7097,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7098,"byte_end":7112,"line_start":233,"line_end":233,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7113,"byte_end":7116,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7117,"byte_end":7166,"line_start":235,"line_end":235,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7167,"byte_end":7235,"line_start":236,"line_end":236,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7236,"byte_end":7245,"line_start":237,"line_end":237,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":585},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7869,"byte_end":7909,"line_start":255,"line_end":255,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7746,"byte_end":7818,"line_start":253,"line_end":253,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7821,"byte_end":7866,"line_start":254,"line_end":254,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":587},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8095,"byte_end":8119,"line_start":259,"line_end":259,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7913,"byte_end":7981,"line_start":256,"line_end":256,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7984,"byte_end":8059,"line_start":257,"line_end":257,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8062,"byte_end":8092,"line_start":258,"line_end":258,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":589},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8340,"byte_end":8352,"line_start":263,"line_end":263,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8123,"byte_end":8198,"line_start":260,"line_end":260,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8201,"byte_end":8274,"line_start":261,"line_end":261,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8277,"byte_end":8337,"line_start":262,"line_end":262,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":591},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8643,"byte_end":8660,"line_start":270,"line_end":270,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8356,"byte_end":8430,"line_start":264,"line_end":264,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8433,"byte_end":8464,"line_start":265,"line_end":265,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8467,"byte_end":8470,"line_start":266,"line_end":266,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8473,"byte_end":8549,"line_start":267,"line_end":267,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8552,"byte_end":8627,"line_start":268,"line_end":268,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8630,"byte_end":8640,"line_start":269,"line_end":269,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":584},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7729,"byte_end":7741,"line_start":252,"line_end":252,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7595,"byte_end":7668,"line_start":250,"line_end":250,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9065,"byte_end":9069,"line_start":287,"line_end":287,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: Pod, B: Pod>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8926,"byte_end":8947,"line_start":281,"line_end":281,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8948,"byte_end":8951,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8952,"byte_end":8965,"line_start":283,"line_end":283,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8966,"byte_end":8969,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8970,"byte_end":9047,"line_start":285,"line_end":285,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9048,"byte_end":9057,"line_start":286,"line_end":286,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9373,"byte_end":9381,"line_start":301,"line_end":301,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: Pod, B: Pod>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9247,"byte_end":9279,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9280,"byte_end":9283,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9284,"byte_end":9297,"line_start":297,"line_end":297,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9298,"byte_end":9301,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9302,"byte_end":9355,"line_start":299,"line_end":299,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9356,"byte_end":9365,"line_start":300,"line_end":300,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9901,"byte_end":9909,"line_start":322,"line_end":322,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: Pod, B: Pod>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9783,"byte_end":9807,"line_start":316,"line_end":316,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9808,"byte_end":9811,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9812,"byte_end":9825,"line_start":318,"line_end":318,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9826,"byte_end":9829,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9830,"byte_end":9883,"line_start":320,"line_end":320,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9884,"byte_end":9893,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10427,"byte_end":10437,"line_start":343,"line_end":343,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: Pod, B: Pod>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10303,"byte_end":10331,"line_start":337,"line_end":337,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10332,"byte_end":10335,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10336,"byte_end":10349,"line_start":339,"line_end":339,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10350,"byte_end":10353,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10354,"byte_end":10409,"line_start":341,"line_end":341,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10410,"byte_end":10419,"line_start":342,"line_end":342,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10713,"byte_end":10727,"line_start":356,"line_end":356,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: Pod, B: Pod>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10577,"byte_end":10613,"line_start":350,"line_end":350,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10614,"byte_end":10617,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10618,"byte_end":10631,"line_start":352,"line_end":352,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10632,"byte_end":10635,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10636,"byte_end":10695,"line_start":354,"line_end":354,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10696,"byte_end":10705,"line_start":355,"line_end":355,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":235},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10958,"byte_end":10970,"line_start":365,"line_end":365,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: Pod, U: Pod>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10883,"byte_end":10940,"line_start":363,"line_end":363,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10941,"byte_end":10950,"line_start":364,"line_end":364,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11139,"byte_end":11155,"line_start":371,"line_end":371,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: Pod, U: Pod>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11060,"byte_end":11121,"line_start":369,"line_end":369,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11122,"byte_end":11131,"line_start":370,"line_end":370,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11657,"byte_end":11665,"line_start":388,"line_end":388,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: Pod, B: Pod>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11270,"byte_end":11299,"line_start":377,"line_end":377,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11300,"byte_end":11303,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11304,"byte_end":11381,"line_start":379,"line_end":379,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11382,"byte_end":11461,"line_start":380,"line_end":380,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11462,"byte_end":11540,"line_start":381,"line_end":381,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11541,"byte_end":11560,"line_start":382,"line_end":382,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11561,"byte_end":11564,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11565,"byte_end":11579,"line_start":384,"line_end":384,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11580,"byte_end":11583,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11584,"byte_end":11639,"line_start":386,"line_end":386,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11640,"byte_end":11649,"line_start":387,"line_end":387,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12037,"byte_end":12049,"line_start":403,"line_end":403,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: Pod, B: Pod>(&A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11844,"byte_end":11880,"line_start":396,"line_end":396,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11881,"byte_end":11884,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11885,"byte_end":11899,"line_start":398,"line_end":398,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11900,"byte_end":11903,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11904,"byte_end":11956,"line_start":400,"line_end":400,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11957,"byte_end":12019,"line_start":401,"line_end":401,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12020,"byte_end":12029,"line_start":402,"line_end":402,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":247},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12627,"byte_end":12639,"line_start":421,"line_end":421,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: Pod, B: Pod>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12525,"byte_end":12569,"line_start":417,"line_end":417,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12570,"byte_end":12573,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12574,"byte_end":12609,"line_start":419,"line_end":419,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12610,"byte_end":12619,"line_start":420,"line_end":420,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13879,"byte_end":13893,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: Pod, B: Pod>(&[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13121,"byte_end":13194,"line_start":435,"line_end":435,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13195,"byte_end":13198,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13199,"byte_end":13258,"line_start":437,"line_end":437,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13259,"byte_end":13328,"line_start":438,"line_end":438,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13329,"byte_end":13332,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13333,"byte_end":13347,"line_start":440,"line_end":440,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13348,"byte_end":13351,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13352,"byte_end":13432,"line_start":442,"line_end":442,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13433,"byte_end":13453,"line_start":443,"line_end":443,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13454,"byte_end":13531,"line_start":444,"line_end":444,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13532,"byte_end":13608,"line_start":445,"line_end":445,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13609,"byte_end":13689,"line_start":446,"line_end":446,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13690,"byte_end":13714,"line_start":447,"line_end":447,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13715,"byte_end":13840,"line_start":448,"line_end":448,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13841,"byte_end":13861,"line_start":449,"line_end":449,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13862,"byte_end":13871,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14856,"byte_end":14874,"line_start":475,"line_end":475,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: Pod, B: Pod>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14710,"byte_end":14782,"line_start":470,"line_end":470,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14783,"byte_end":14795,"line_start":471,"line_end":471,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14796,"byte_end":14799,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14800,"byte_end":14838,"line_start":473,"line_end":473,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14839,"byte_end":14848,"line_start":474,"line_end":474,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17646,"byte_end":17654,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17687,"byte_end":17693,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17733,"byte_end":17739,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17780,"byte_end":17786,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17827,"byte_end":17833,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17874,"byte_end":17880,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17922,"byte_end":17928,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17971,"byte_end":17977,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18017,"byte_end":18023,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18064,"byte_end":18070,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18111,"byte_end":18117,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18158,"byte_end":18164,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18206,"byte_end":18212,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18337,"byte_end":18343,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18397,"byte_end":18408,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18440,"byte_end":18453,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18495,"byte_end":18507,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32157,"byte_end":32164,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32232,"byte_end":32238,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32306,"byte_end":32313,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32381,"byte_end":32388,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32456,"byte_end":32462,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32530,"byte_end":32537,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34912,"byte_end":34920,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34948,"byte_end":34954,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34989,"byte_end":34995,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35031,"byte_end":35037,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35073,"byte_end":35079,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35115,"byte_end":35121,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35158,"byte_end":35164,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35202,"byte_end":35208,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35243,"byte_end":35249,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35285,"byte_end":35291,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35327,"byte_end":35333,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35369,"byte_end":35375,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35412,"byte_end":35418,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35729,"byte_end":35740,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35767,"byte_end":35780,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35812,"byte_end":35824,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":47931,"byte_end":47938,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48001,"byte_end":48007,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48070,"byte_end":48077,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48140,"byte_end":48147,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48210,"byte_end":48216,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48279,"byte_end":48286,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70701,"byte_end":70709,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8727,"byte_end":8739,"line_start":273,"line_end":273,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":16721,"byte_end":16726,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17646,"byte_end":17654,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17687,"byte_end":17693,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17733,"byte_end":17739,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17780,"byte_end":17786,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17827,"byte_end":17833,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17874,"byte_end":17880,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17922,"byte_end":17928,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":17971,"byte_end":17977,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18017,"byte_end":18023,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18064,"byte_end":18070,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18111,"byte_end":18117,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18158,"byte_end":18164,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18206,"byte_end":18212,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18337,"byte_end":18343,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18397,"byte_end":18408,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":3037},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18440,"byte_end":18453,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":36597},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":18495,"byte_end":18507,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":30411},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32157,"byte_end":32164,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32232,"byte_end":32238,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":50881},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32306,"byte_end":32313,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":50892},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32381,"byte_end":32388,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":50901},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32456,"byte_end":32462,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":50912},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":32530,"byte_end":32537,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":50927},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34446,"byte_end":34454,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34457,"byte_end":34461,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34912,"byte_end":34920,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34948,"byte_end":34954,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":34989,"byte_end":34995,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35031,"byte_end":35037,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35073,"byte_end":35079,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35115,"byte_end":35121,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35158,"byte_end":35164,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35202,"byte_end":35208,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35243,"byte_end":35249,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35285,"byte_end":35291,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35327,"byte_end":35333,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35369,"byte_end":35375,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35412,"byte_end":35418,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35729,"byte_end":35740,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":3037},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35767,"byte_end":35780,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":36597},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":35812,"byte_end":35824,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":30411},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":47931,"byte_end":47938,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48001,"byte_end":48007,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":50881},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48070,"byte_end":48077,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":50892},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48140,"byte_end":48147,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":50901},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48210,"byte_end":48216,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":50912},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":48279,"byte_end":48286,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":50927},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":51825,"byte_end":51829,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":160}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70701,"byte_end":70709,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":173}},{"span":{"file_name":"/home/simeon/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8727,"byte_end":8739,"line_start":273,"line_end":273,"column_start":29,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":584},"to":{"krate":1,"index":9560}}]}